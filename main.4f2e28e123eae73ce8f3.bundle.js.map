{"version":3,"file":"main.4f2e28e123eae73ce8f3.bundle.js","sources":["webpack:///./stories/BasicStickyTable.jsx"],"sourcesContent":["import React, { useEffect, useMemo, useReducer } from \"react\";\n\nimport * as R from \"ramda\";\n\nimport { StickyTable } from \"../src/StickyTable\";\n\nconst ROW_MIN = 25;\nconst ROW_MAX = 100;\nconst COL_MIN = 50;\nconst COL_MAX = 300;\n\nconst makeCustomSizeFunc = (count, min, max) => {\n  let sizes = [];\n  for (let i = 0; i < count; ++i) {\n    sizes.push(Math.floor(Math.random() * (max - min)) + min);\n  }\n  return i => sizes[i];\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"rowCount\":\n      return {\n        ...state,\n        rowCount: action.rowCount,\n        rowFunc: makeCustomSizeFunc(action.rowCount, ROW_MIN, ROW_MAX)\n      };\n    case \"colCount\":\n      return {\n        ...state,\n        colCount: action.colCount,\n        colFunc: makeCustomSizeFunc(action.colCount, COL_MIN, COL_MAX)\n      };\n    default:\n      return state;\n  }\n};\n\nconst BasicStickyTable = ({\n  rowCount,\n  colCount,\n  width,\n  height,\n  colWidth,\n  rowHeight,\n  leftWidth,\n  rightWidth,\n  topHeight,\n  bottomHeight,\n  overscan,\n  showTop,\n  showRight,\n  showBottom,\n  showLeft,\n  usingColFunc,\n  usingRowFunc\n}) => {\n  const [state, dispatch] = useReducer(reducer, {\n    rowCount,\n    colCount,\n    rowFunc: makeCustomSizeFunc(rowCount, ROW_MIN, ROW_MAX),\n    colFunc: makeCustomSizeFunc(colCount, COL_MIN, COL_MAX)\n  });\n  const [ourRowCount, ourColCount, rowFunc, colFunc] = R.props(\n    [\"rowCount\", \"colCount\", \"rowFunc\", \"colFunc\"],\n    state\n  );\n  useEffect(() => {\n    if (rowCount !== ourRowCount) {\n      dispatch({ type: \"rowCount\", rowCount });\n    }\n  }, [rowCount, ourRowCount]);\n  useEffect(() => {\n    if (colCount !== ourColCount) {\n      dispatch({ type: \"colCount\", colCount });\n    }\n  }, [colCount, ourColCount]);\n\n  let [data, topData, rightData, bottomData, leftData] = useMemo(() => {\n    let data = [];\n    let topData, rightData, bottomData, leftData;\n    if (showTop) {\n      topData = [];\n    }\n    if (showRight) {\n      rightData = [];\n    }\n    if (showBottom) {\n      bottomData = [];\n    }\n    if (showLeft) {\n      leftData = [];\n    }\n    for (let rowI = 0; rowI < ourRowCount; ++rowI) {\n      let row = [];\n      for (let colI = 0; colI < ourColCount; ++colI) {\n        row.push(`row: ${rowI}, col ${colI}`);\n      }\n      data.push(row);\n      if (showLeft) {\n        leftData.push(rowI);\n      }\n      if (showRight) {\n        rightData.push(ourRowCount - rowI - 1);\n      }\n    }\n    for (let colI = 0; colI < ourColCount; ++colI) {\n      if (showTop) {\n        topData.push(colI);\n      }\n      if (showBottom) {\n        bottomData.push(ourColCount - colI - 1);\n      }\n    }\n    return [data, topData, rightData, bottomData, leftData];\n  }, [showTop, showRight, showBottom, showLeft, ourRowCount, ourColCount]);\n\n  return (\n    <div style={{ padding: 50 }}>\n      <StickyTable\n        data={data}\n        width={width}\n        height={height}\n        columnWidth={usingColFunc ? colFunc : colWidth}\n        rowHeight={usingRowFunc ? rowFunc : rowHeight}\n        leftWidth={leftWidth}\n        rightWidth={rightWidth}\n        topHeight={topHeight}\n        bottomHeight={bottomHeight}\n        topData={topData}\n        rightData={rightData}\n        bottomData={bottomData}\n        leftData={leftData}\n        overscan={overscan}\n      />\n    </div>\n  );\n};\n\nexport default BasicStickyTable;\n"],"mappings":"AAWA","sourceRoot":""}